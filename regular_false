#include<iostream>
#include<cmath>
using namespace std;

double func(double x){
    return x*x - 4;  // Example: f(x) = x^2 - 4 (roots at x = -2 and x = 2)
}

double regFals(double a, double b, int itr){
    if(func(a)*func(b) >= 0){
        cout << "Invalid initial guesses. The function must have opposite signs at the endpoints." << endl;
        return -1;  // Return -1 to indicate an error
    }

    double c = a;
    for(int i = 0; i < itr; i++){
        // Regula Falsi formula to calculate the new approximation
        c = b - (func(b) * (a - b)) / (func(a) - func(b));

        // Check if the function value at c is sufficiently close to zero
        if(fabs(func(c)) < 1e-6){
            cout << "Converged to a root." << endl;
            break;  // Stop iteration if the function value is close to zero
        }

        // Print current approximation
        cout << "Iteration " << i + 1 << ": c = " << c << endl;

        // Update the interval for the next iteration
        if(func(c) * func(a) < 0){
            b = c;  // Root lies between a and c
        } else {
            a = c;  // Root lies between c and b
        }
    }

    return c;  // Return the final approximation of the root
}

int main(){
    double a = 0, b = 3;  // Initial guesses
    int iterations = 7;    // Maximum number of iterations

    double root = regFals(a, b, iterations);

    cout << "The root of the equation is approximately: " << root << endl;

    return 0;
}
